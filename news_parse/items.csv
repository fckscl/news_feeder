link,next,text,title
[<200 https://tproger.ru/articles/kak-obespechit-kiberbezopasnost-kompanii-v-mire-gde-ataki-hakerov-proishodjat-kazhdye-14-sekund/>],page2,"2020 год и пандемия внесли существенные коррективы в работу большинства компаний. Переход в онлайн и вынужденная цифровая трансформация принесли в жизнь руководителей широкий спектр новых рисков, к которым многие были просто не готовы. Последствия кибератак, технической неисправности сервисов или человеческой ошибки могут серьезно повредить бизнесу. Рассказываем, какие меры необходимо принять бизнесу для защиты от кибер-угроз.,Согласно , Cybersecurity Ventures к 2021 году киберпреступность будет стоить миру 6 триллионов долларов в год по сравнению с 3 триллионами в 2015 году.,Эти затраты включают в себя: повреждение и уничтожение данных, кражу денег, потерю производительности, кражу интеллектуальной собственности, кражу личных и финансовых данных, хищение, мошенничество, нарушение нормального ведения бизнеса после атаки, судебно-медицинское расследование, восстановление и удаление взломанных данных и систем, а также репутационный ущерб компании.,Примерно 80% компаний подвергались кибератаке за последние 12 месяцев и, согласно исследованиям о , Всемирного экономического форума 2019 года, мошенничество с данными и кибератаки являются четвертым и пятым глобальными рисками, с которыми сталкивается каждая организация.,Выявление кибер-рисков на раннем этапе — одна из самых важных и сложных задач компании при выстраивании корпоративной кибербезопасности. Здесь часто не достаточно просто изучить несколько статей в интернете и поставить двухфакторную авторизацию на все сервисы — вам необходимо знать и понимать, с чем вы можете столкнуться.,Выделяют 3 основных типа угроз:,По сути, это сознательная попытка нанесения вреда организации, вызванная стремлением злоумышленника получить выгоду — материальную, конкурентную или любую другую.,Защита от подобных видов атак требует всестороннего подхода к корпоративной кибербезопасности.,Компании редко задумываются о безопасности заранее. Вопрос встает только по факту возникновения проблем. Конечно, когда молодая компания запускает свой первый сайт, она старается экономить, используя популярные CMS, и про безопасность, скорее всего, даже не задумывается — в результате чего такой сайт имеет повышенный риск заразиться вирусами. Злоумышленники легко взламывают такие ресурсы, особенно когда данные CMS не обновляются.,Хотя мало известные компании не очень интересны злоумышленникам, одним из частых запросов от таких компаний — вылечить их зараженный веб-сайт. Так как многие современные браузеры могут определить вирус и предупреждают пользователей об опасности — клиенты уходят с зараженных сайтов и компания теряет прибыль. Также на зараженном сайте может появиться сторонняя реклама, иногда с непристойным содержанием, что очень сильно может повлиять на репутацию данной компании.,Для избежания подобных проблем мы рекомендуем постоянно обновлять вашу CMS, проводить по возможности аудит сайта или разрабатывать веб-сайты без использования CMS.,«Но проблемы молодых компаний несоизмеримы с проблемами крупных компаний. Чем известнее компания, тем больше появляется проблем. Чем популярней бренд, тем больше желающих найти уязвимость. Напомню, что такие гиганты как Microsoft, Apple и Google платят большие деньги всем, кто находит уязвимость в их продуктах. И к нам достаточно часто обращаются крупные компании с просьбой выявить и исправить известные злоумышленникам уязвимости. Т.е. клиент знает, что злоумышленники нашли брешь в их системе, но ни клиент, ни разработчик этой системы найти эту брешь, а уж тем более исправить ее, не могут. А такие бреши, как правило, влекут серьезные финансовые потери.,Еще один из примеров, когда компании может потребоваться усиленная защита — во время проведения рекламных акций. В такие периоды злоумышленники пытаются повысить нагрузку на сервера компании с целью вывода их из строя. И здесь вам поможет мониторинг повышенной активности атак на ресурсы».,Несмотря на множество преимуществ, при размещении своих данных в облачной среде компании необходимо особенно тщательно следить за безопасностью этих данных и привычками своих сотрудников.,Когда злоумышленники получают ключи доступа к сервисам компании, то возможны, как минимум, два пути развития событий: либо они «всё ломают» и компания получает нерабочий сервис и пропавшие данные, либо они незаметно крадут данные и продают вашим конкурентам.,Использование неутвержденных облачных приложений, ошибки конфигурации SaaS/IaaS/PaaS и случайный обмен конфиденциальными данными — все это риски, которые возрастают при использовании облака.,По сути PaaS, SaaS, IaaS это концепция аренды с абонентской платой. Вы не покупаете железо, программу, сеть (или другую инфраструктуру) себе на баланс, а берете ее в аренду в облаке например (PaaS, SaaS, IaaS). Конечно необходимо выбрать правильное облако для своих интересов:,Для крупных и средних компаний лучше выбрать ,. Инфраструктура включает вычислительные ресурсы: виртуальные серверы, хранилища, сети. Решения IaaS более серьезные и финансово затратные, приходится иметь дело с безопасностью данных, резервным копированием и непрерывностью бизнеса. Это означает, что вашей команде придется научиться управлять новой инфраструктурой. В противном случае процесс мониторинга и управления ресурсами может стать слишком сложным.,Для ,самым частым покупателем являются средние компании, и более уникальный рынок — разработчики и компании, создающие собственное ПО. Удобство этой модели в том, что вам не надо администрировать системное ПО. Появляется полная свобода, какие прикладные программы и средства разработки развернуть на взятой в аренду инфраструктуре.,SaaS = eCommerce. Еще SaaS называют Aii-In-One , потому что поставщик отвечает за задачи по развертыванию и обслуживанию приложений: облачный хостинг серверов, установка операционной системы, виртуализации и средств резервного копирования, промежуточное ПО, и прикладные приложения. Очень хороший вариант для малого и среднего бизнеса.,Но основная угроза для организации исходит от сотрудников: повторно используемые пароли, атаки социальной инженерии и неспособность реализовать многофакторную аутентификацию являются наиболее вероятными угрозами, чем удаленно установленное ПО или любые кибератаки., Microsoft, которая ежедневно противодействует более 300 миллионам попыток мошеннического входа в свои облачные сервисы, показывает, что 99,9% атак можно отразить с помощью развертывания многофакторной аутентификации, где от пользователя требуют кода подтверждения в дополнение к паролю для каждой учетной записи.,Самая нелепая кража данных произошла в декабре 2019 года. У бухгалтера Facebook из машины украли 3 жестких диска с данными 29 тыс. сотрудников компании. Там были данные о заработной плате, имена сотрудников, номера банковских счетов и последние четыре цифры номеров социального страхования. Жесткие диски даже не были зашифрованы. А в 2017 году Deloitte стала жертвой взлома, продолжавшегося несколько месяцев. Хакеры получили доступ к ИТ-системе компании, взломав учетную запись администратора, которая была защищена простым паролем.,Выявление рисков и технологическая безопасность компании являются, безусловно, очень важным звеном в кибербезопасности. Но первая линия угрозы — ваши сотрудники. Поэтому, закладывая бюджет на новые сервисы и внедрение их в компанию, не забывайте обучать сотрудников основам элементарной кибербезопасности.,«If you spend more on coffee than on IT security, you will be hacked. What’s more, you deserve to be hacked» ― Richard Clarke","Как обеспечить компании защиту от кибератак,Крестик,Баг"
[<200 https://tproger.ru/articles/proverjaju-raschet-nejroseti-samopisnym-modulem-sravnivaja-vyhod-s-pytorch/>],page2,"Первая статья из цикла — ,.,Я второй день пытаюсь провернуть один тест: собрать одну и ту же сетку своей моделью nn_module (мною написанный класс) и с помощью библиотеки PyTorch. Посмотрим, как получится. Пока свел их, чтобы они имели одинаковую структуру. Теперь эти входы надо задать вручную и сравнить выходы.,Зачем? А хз. Просто хочется предсказуемости в результатах, и в том, что я делаю. Да и проверить свой класс нейронной сети, написанный уже фиг знает когда, без нормальных знаний, наощупь.,Что касается собственно отбора, загвоздка с вращением существ, возможно и не должна разрешаться как-то математически, как с sin(): данная конфигурация отбора не вынуждает существ бесконечно адаптироваться, достаточно выживать на каком-то уровне, когда основная массу существ все-таки дает потомство, тогда отбор фактически останавливается. Такая у меня гипотеза. Они бегают, находят хоть немного пищи, достаточно чтобы дожить до размножения.,Ну, поглядим, надо расширять функционал наблюдения за существами, чтобы увидеть ситуацию в деталях.,В общем, возвращаясь к тесту, вот в это надо попасть:,Выход вроде этот:,А получилось: 0.532279745246279,Хм.. даже неясно как это трактовать. Проще всего поменять входы, посмотреть как будет реагировать выход.,Болван,,было ,, вместо ,Соответственно, сетка стартовала с нулевыми инпутами. Поправил, и…,Странно, что входы так мало влияют на выходы. Многовато слоёв? Оставим один скрытый слой и 1 нейрон на выходе.,Так, непонятно. Такая точность в предыдущем эксперименте, и такие промахи в этом. Ага, ошибся в одном из весов. 0.1045 вместо 0.1802. Еще раз проверим.,Ладно, думаю, этому можно верить. Что мы имеем? Ну, ура, потому что мой класс nn_module, который считает полносвязную сетку прямого распространения правильно, в точности также, как,Давно хотел подобный эксперимент провести. Теперь можно заменить мой класс на конструкцию из pytorch и получить что-то аналогичное (они будут вести себя также странно и крутиться? Или что-то поменяется?). А потом можно поиграть со разными конфигурациями сетей. LSTM, я ползу к тебе.,Еще, как побочная информация, заметил, что у трехслойных сетей, выход как-то слабо коррелирует с входом, по крайней мере, в сравнении с двуслойными сетями. Ну, или по крайней мере, можно поразмышлять об этом явлении.","Проверяю расчёт самописным модулем, сравнивая выход с pytorch,Крестик,Баг"
[<200 https://tproger.ru/articles/10-oshibok-nachinajushhego-programmista/>],page2,"Ошибки начинающего программиста не ограничиваются Error и Exception. Есть целый ряд нехороших привычек, которые серьёзно тормозят карьерный рост разработчика. Рассмотрим каждую из них и попытаемся найти пути искоренения.,Начнём с того, что преобладающее большинство языков программирования основаны на английском (ну если только это не 1С). Например знание английского позволит быстро понять, что происходит в этом куске кода:,Закончим тем, что большая часть комьюнити этих языков общаются на английском. Добавим к вышесказанному документацию, которая нередко бывает криво переведена либо вообще отсутствует на русском, как у Salesforce. Не будем также забывать, что многие компании работают по принципу аутсорсинга, где общение с иностранными клиентами — само собой разумеющаяся штука.,Так что если вам очень хочется написать под очередным постом «А почему эти книги не на русском?», подумайте, а хотите ли вы расти как программист дальше? Сеньор такие вопросы задавать не будет.,Решились подтянуть английский? Держите нашу подборку бесплатных материалов и книг по английскому языку:,Когда мы только-только начинаем свой путь, независимо от сферы деятельности, мы охотно спрашиваем и узнаём что-то новое. Но проходит некоторое время, и уже становится неловко задавать вопросы, ведь возникает ощущение, что ответы давно для всех очевидны.,Знакомьтесь, это синдром самозванца. Кажется, что все вокруг уже всё знают, а вы существенно забуксовали, поэтому с каждым днём спрашивать о чём-то становится всё сложнее. Это типичная ошибка начинающего программиста.,Есть и другой вариант: вы уверены в своих знаниях и думаете, что сами легко разберётесь в проблеме. Проходит день, два, неделя, а проблема никак не решается.,В обоих случаях поможет следующий подход:,А это уже другая крайность. Давайте будем уважать время коллег и предварительно искать информацию самостоятельно. Важно лишь, чтобы это не растягивалось на дни и недели: в документации зачастую всё лежит на поверхности.,Держите мастер-класс для программиста «Как правильно гуглить»:, ,Даже если вы принципиально не пишете тесты, считая это лишней тратой времени, вы так или иначе тестируете код, запуская его. Возьмите в привычку каждый раз, проверив что-то вручную, написать аналогичный тест. Программный код будет расти, и в какой-то момент можно забыть, что выполняет та или иная функция, а также с какими ошибками вы сталкивались при её реализации.,Освойте методологию разработки TDD (test-driven development) — разработка через тестирование, которая основывается на повторении коротких циклов: написание теста, покрывающего изменения, а затем написание самого кода, который это реализовывает. Хотя TDD подходит не любому проекту, понимание и практика лишними не будут.,Нельзя это отнести к серьёзным ошибкам начинающего программиста. Скорее, к правилам хорошего тона: не стоит засорять код лишними комментариями. Если вы научитесь понятно называть переменные и функции, количество комментариев сильно сократится.,Пример так себе названий:,И вот что будет, если называть переменные нормально:,Ничего не трогать, если что-то работает. Увы, это очень вредная привычка: даже работающий код можно и нужно совершенствовать. Задачи имеют свойство масштабироваться: сегодня заказчик просит написать калькулятор, а завтра захочет, чтобы это был профессиональный бухгалтерский расчёт.,Код должен быть вычищен от:,Используйте на полную принципы ООП. Помните, что класс — это не винегрет из разношёрстных действий: каждый элемент кода описывается в одном месте. При этом каждый объект предоставляет другим объектам ровно столько данных, сколько нужно: это позволяет снизить степень зависимости отдельных частей кода друг от друга, и редактировать их по отдельности, не ломая при этом всю логику.,Как же раздражает, когда менеджер проекта просит во всех подробностях расписать план действий по таску, правда? Ведь клиент тратит ваше драгоценное время: достаточно ответить «Yes, of course», и с места в карьер. Правильно?,А вот и нет: это очередная ошибка начинающего разработчика. Ненужные, на первый взгляд, детали сэкономят вам время в ближайшем будущем. Неверно интерпретированный таск заставит вас написать код, который после придётся переделывать. Расписывать заказчику вопросы и план действий — обязательное условие, даже если очень лень, даже если заказчика самого раздражает такая дотошность. Важно докопаться до истины и понять, что вы оба on the same page, а не каждый сам по себе.,Блокнот — вполне подходящая система контроля версий (VCS), пока вы учитесь. Но выход на профессиональный уровень, даже если это Trainee, потребует от вас умения работать в команде. И вот здесь начинается самое интересное.,Системы контроля версий позволяют обеспечить ясность кода, при том не только для других, но и для себя. История внесённых изменений ответит на большинство вопросов. Даже маленькие коммиты с понятными названиями помогут понять, как программа пришла к текущему состоянию.,VCS позволяет быстро отыскать баг, время его появления и главного виновника. В Git предусмотрен бинарный поиск bisect, который находит коммит, внёсший баг.,Ошибкой начинающего разработчика также является ограниченность набором любимых инструментов. Все они предназначены для решения конкретных задач: молоток хорош в забивании гвоздей и плох в закручивании саморезов. Так что использовать молоток лишь потому, что вы хорошо с ним знакомы или он самый популярный на Amazon, — сомнительная практика.,Если стремитесь к карьерному взлёту, расширяйте кругозор, изучая и используя новые тулзы. В конце концов, в какой-то момент вы обнаружите, что стали куда более востребованным специалистом, нежели ваши коллеги по отделу.,Самый банальный совет, который уже порядком надоел, но он и правда рабочий. Прекратите забивать на себя:,Надеемся, что приведённые советы помогут вам выстроить правильную траекторию профессионального развития. Также обязательно посмотрите, , сегодня.","10 ошибок начинающего программиста,Крестик,Баг"
[<200 https://tproger.ru/articles/glavnye-mify-zakaznoj-razrabotki/>],page2,"Мифы сопровождали человека с древних времен и продолжают существовать сейчас — уже в мире высоких технологий. Мы узнали, какие мифы встречаются в сфере заказной разработки, почему такие стереотипы появляются, и главное — что на самом деле представляет из себя работа в компании-интеграторе., ,Появление мифа связано с развитием инсорсинга, то есть появлением у заказчика собственных команд разработки. Для мотивации собственного штата интересные задачи заказчик может оставить себе. С другой стороны, у крупных клиентов проектов и задач намного больше, чем собственных специалистов.,Есть примеры, когда компании изначально ориентируются на ИТ-интеграторов, а в собственные команды набирают преимущественно менеджеров. Есть задачи, которые полностью отдают подрядчикам.,Что касается интересных и современных технологий, то иногда заказчик предоставляет их выбор интегратору. В таком случае все в наших руках, и разработчики стараются использовать самые новые подходы, технологии, фреймворки, продукты.,Одна из главных задач — понимать наличие компетенций у заказчика и подбирать такие решения, которые он сможет поддерживать и развивать. В работе нужно искать золотую середину между новыми технологиями и наличием компетенций у заказчика.,Бывает, что у заказчика свой стек, или он выбирает технологии сам, в таком случае у нас выбор несколько ограничен. Однако, многие клиенты используют современный техстек с точки зрения разработки, например, платформы оркестрации контейнеров Kubernetes или Openshift, брокеры на базе Apache Kafka, S3 хранилища и другие решения.,Поэтому интересных проектов хватает на всех — и на собственные команды, и на привлечение интеграторов., ,За последнее десятилетие заказная разработка трансформировалась в заказную продуктовую разработку с использованием соответствующих принципов и подходов, например методологии DevOps. Преимущество заказной продуктовой разработки в том, что заказчику не нужно держать продуктовую команду и брать на себя управление и экспертизу — это берет на себя интегратор.,В старом виде заказная разработка не работает, и мы перешли на итерационный подход ведения проектов. Такой подход построен не на конкретном ТЗ заказчика, а на видении, которое может меняться в зависимости от конъюнктуры рынка.,Например, продукт вышел на рынок, но появилась потребность в новых фичах и функциях. Это проекты с продолжением. Разве можно сдать заказной продукт, который постоянно развивается?,Также если в процессе эксплуатации появились проблемы, то разработчик может инициировать автоматизацию исправления или предложить решение, которое позволит избежать выявленных проблем. Каждый может внести свою инновацию.,В этом смысле итерационный подход дает возможность специалистам для саморазвития и проявления инициативы.,Существует мнение, что заказная разработка, в отличие от продуктовой, не имеет продолжения, а команда не знает, как ведет себя продукт в промышленной эксплуатации. Давайте посмотрим на другие сценарии, когда после реализации жизнь продукта не заканчивается, и дальше происходит его поддержка.,Иногда заказчик поддерживает решение собственными силами, но чаще поддержкой продолжает заниматься подрядчик. Когда компания реализует решение, стоит давать на него гарантию. Если что-то случилось — подключаются сотрудники компании. Всегда интересно знать, как созданное решение ведет себя в промышленной эксплуатации — в бою. Это полезный опыт., ,Стереотип, что тестировщики и разработчики — соперники, популярен прежде всего в ИТ-сообществах в интернете, где можно найти различные мемы на эту тему. В реальной жизни ситуация другая.,Многие слышали об эффекте Даннинга-Крюгера и о кривой уверенности в своих силах. Гипотеза гласит, что менее компетентные люди в целом имеют более высокое мнение о собственных способностях, чем это свойственно людям компетентным. Такой эффект можно встретить в ИТ-сфере.,Младшие специалисты могут считать свой код идеальным, а тестировщики могут разрушить их представление о проделанной работе. Специалисты уровня middle, наоборот, пишут хороший код, но считают, что там есть изъян. В этой ситуации тестировщики подтверждают отсутствие дефектов и укрепляют самооценку разработчика.,Когда я начал работать младшим специалистом по тестированию, я ошибочно думал, что если нашел дефект, то надо обвинять разработчика в написании некачественного кода. Но мне быстро объяснили, что в компании придерживаются Agile-манифеста.,В манифесте есть пункт: ответственность за услугу или продукт несет вся команда. Разработчики и тестировщики должны максимально конкретно рассказывать, где и какие слабые места у продукта, кода, софта. Взаимовыручка команды особо чувствуется на крупных проектах, где работают большие команды разработки, тестирования и аналитики, а руководители проектов транслируют ценности Agile.,С таким подходом качество становится ответственностью всей команды проекта, а тестировщики и разработчики — союзники, и уж точно не соперники., , ,Считается, что заказчик — это владелец задач, он должен принимать решения, а подрядная организация может только выполнять работы. На практике — у меня другой опыт.,На некоторых проектах заказчик просит команду подрядчика подключаться как можно больше к решению глобальных и стратегических задач, высказывать свое профессиональное мнение. Конечно, все решения необходимо согласовывать в банке. Но это не отличается от процессов, когда архитектор из внутренней команды банка предлагает решение — это всё те же согласования.,Если смотреть на задачи интегратора классически, то кажется, что мы реализуем только бизнес-приложения. Но у нас есть и активности по платформенным сервисам, наши сотрудники писали правила разработки для заказчика.,Мы писали концепт, согласовывали его с коллегами в банке. Это уже уровень Enterprise-архитектуры, когда сотрудники вместе с корпоративными архитекторами разрабатывают глобальную стратегию. В целом, работа в компании интеграторе дает сотруднику возможность быть услышанным, попробовать себя как архитектор бизнес-приложений, так и в роли enterprise-архитектора.","Главные мифы заказной разработки,Крестик,Баг"
[<200 https://tproger.ru/articles/napisanie-smart-kontrakta-dlja-nft/>],page2,"Привет! Меня зовут Костанян Карен, я занимаюсь разработкой на Node.js в цифровом интеграторе Secreate. В этой статье мы разберемся как написать смарт контракт и отчеканить наши нфт.,Если у вас нет медиафайлов и метаданных NFT в формате JSON, мы создали коллекцию изображений, с которыми вы можете поэкспериментировать. Вы можете найти медиафайлы , и файлы метаданных JSON ,.,Мы будем использовать Hardhat, стандартную среду разработки Ethereum, для разработки, развертывания и проверки наших смарт-контрактов. Создайте пустую папку для нашего проекта и инициализируйте пустой файл package.json, выполнив в терминале следующую команду:,Теперь вы должны находиться в папке my-nft и иметь файл с именем package.json. Далее давайте установим Hardhat. Выполните следующую команду:,После установки hardhat, мы можем создать пример проекта Hardhat, выполнив следующую команду:,После этой команды, мы увидим несколько пунктов для выбора, выберите пункт (Create a basic sample project) и согласитесь со всем по умолчанию.,Давайте проверим, правильно ли установлен наш пример проекта. Выполните следующую команду:,Если все прошло успешно, вы должны увидеть следующее, отличия может быть адрес контракта:,Теперь у нас есть успешно настроенная среда разработки hardhat.,Далее, давайте установим пакет контрактов OpenZeppelin. Это даст нам доступ к контрактам ERC721 (стандарт для NFT).,Если мы хотим поделиться кодом нашего проекта публично (на веб-сайте, таком как GitHub), и при этом мы не хотим делиться конфиденциальной информацией, такой как наш закрытый ключ,  API Etherscan или наш URL-адрес Alchemy (не беспокойтесь, если некоторые из этих слов вам пока не понятны), давайте установим другую библиотеку с именем dotenv.,Теперь мы установили все зависимости и можем приступить написанию нашего контракта.,Наш контракт должен уметь чеканить наши NFT, а именно чеканить NFT бесплатно для владельца и продавать NFT нашим пользователям. И самое главное выводить эфиры на наш кошелек.,Вот как будет сначала выглядит наш контракт:,1. pragma solidity ^0.8.9,Весь исходный код Solidity должен начинаться с объявления версии компилятора Solidity, которую должен использовать этот код. Это делается для предотвращения проблем с будущими версиями компилятора, которые потенциально могут внести изменения, которые могут нарушить ваш код.,2. import,Если у вас есть несколько файлов и вы хотите импортировать один файл в другой, Solidity использует ключевое слово import.,3. PRICE,Цена для чеканки(mint) одного NFT.,4. baseTokenURI,URL-адрес IPFS папки, содержащей метаданные JSON.,5. mapping,Это одно из видов хранилища данных (ключей и значений) который называется Storage, здесь мы будет хранить все токены принадлежащего пользователя.,6. event,Это способ нашего контракта сообщает интерфейсу вашего приложения о том, что что-то произошло в блокчейне, и может прослушивать определенные события и предпринимать действия, когда они происходят.,Далее, мы установим baseTokenURI в нашем конструкторе. Мы также вызовем родительский конструктор(ERC721) и установим имя и символ для наших NFT.,Таким образом, наш конструктор выглядит так:,Когда мы устанавливаем его в качестве базового URI, реализация OpenZeppelin автоматически выводит URI для каждого токена. Предполагается, что метаданные токена 1 будут доступны по адресу,ipfs:/QmTMo6DFrfzKGGbkYsyMZRe16jBJcCcV72ZJHcM3a3Z2w7/1,,а метаданные токена 2 будут доступны по адресу ipfs:/QmTMo6DFrfzKGGbkYsyMZRe16jBJcCcV72ZJHcM3a3Z2w7/2,и так далее.,Однако нам нужно сообщить нашему контракту, что переменная baseTokenURI, которую мы определили, является базовым URI, который должен использовать контракт. Для этого мы переопределяем пустую функцию _baseURI() и возвращаем baseTokenURI.,Мы также пишем функцию для владельца, которая позволяет владельцу изменять baseTokenURI даже после развертывания контракта.,Как владелец, вы можете зарезервировать несколько NFT для себя бесплатно (оплату надо сделать только за газ).,Здесь мы определяем публичную функцию reserveNFT, которая принимает один параметр _tokenId. Это и будет наш токен который мы хотим чеканить и зарезервировать для себя. Обратите внимание, что у этого параметра есть нижнее подчеркивание (_). Он не обязателен, но есть не прописанное внутреннее правило, что все входящие параметры мы пишем со знаком _;,1. _safeMint,Это та самая чудесная функция которая делает чеканку, ее мы берем из контракта ERC721.,2. nftOwner.,Сохраняем кому принадлежит этот токен.,3. emit,Запускаем наше событие, что пользователь (msg.sender) сделал чеканку (_tokenId),Пришло время заработать немного денег. Для того чтобы пользователи могли чеканить наши nft они должны вызвать функцию mintNFT.,1. payable,Это модификатор, который дает знать что функция подлежит к оплате и пользователь отправляет эфир.,2. require:,Проверяет чтобы отправленный эфир был достаточным для чеканки nft.,Функция принимает адрес пользователя и возвращает токены которые мы хранили в хранилище nftOwner.,Самая прекрасная функция. Ее запуск, отправляет на кошелек владельца все заработанные эфиры.,Функцию может запустить только владелец.,1. balance — выбирает всю сумму на балансе контракта.,2. Проверяет чтобы баланс был положительным.,3. Отправляет эфир на кошелек владельца.,4. Проверяет что трансфер прошел успешно, в противном случае идет откат транзакции.,Если вы заметили, наши функции для чеканки reserveNFT, mintNFT могут чеканить токен который уже ранее уже был отчеканен. И перед началом процесса, мы не проверяем был ли данный токе уже отчеканен или нет. Для этого мы создадим модифаер который будет проверять статус токена до чеканки.,Модификатор функции выглядит так же как функция, но использует ключевое слово modifier вместо function. Его нельзя вызвать напрямую как функцию, вместо этого мы можем присоединить имя модификатора в конце определения функции, чтобы изменить ее поведение.,В modifier мы проверяем отчеканен ли переданный на чеканку токен. А все уже отчеканенные токены мы будем хранить в хранилище soldedTokenIds.,Самую главную роль здесь играет нижнее подчеркивание, которое находится в последней строке у модификатора. Оно вызывает остальную часть функции, на которую был вызван модификатор checkTokenStatus.,Для того чтобы наш модификатор начал правильно функционировать, мы должны добавить одно хранилище (Storage) soldedTokenIds и немного отредактировать наши функции для чеканки reserveNFT и mintNFT.,1. В самом верху контракт добавляем наше хранилище.,2. Отредактируем наши функции reserveNFT и mintNFT.,После чеканки мы храним ид токен в хранилище soldedTokenIds, и в конце функции мы добавили наш модификатор с параметром который получает наша функция.,Вот мы закончили с нашим смарт контрактом, он должен выглядеть следующим образом.,Для того чтобы мы могли посмотреть как работает наш контракт, мы должны развернуть его на тестовых сетях, например на Rinkeby.,. Советую развернуть его на сети Rinkeby, чтобы мы могли посмотреть результат на платформе opensea, так как из других сетей на данный момент это будет невозможно.,Для развертывания нам понадобятся следующие вещи. URL-адрес RPC, закрытый ключ от кошелька и апи ключ от etherscan.io,1. Нам понадобится URL-адрес RPC, который позволит транслировать нашу транзакцию создания контракта. Мы будем использовать Алхимию. Создайте учетную запись в Alchemy, потом необходимо создать приложение (это бесплатно).,Пишем любое название, CHAIN: Ethereum, NETWORK: Rinkeby,После того как приложение создано, перейдите на панель инструментов Alchemy и выберите его. Откроется новое окно с кнопкой View Key в правом верхнем углу. Нажмите на кнопку и выберите URL-адрес HTTP.,2. Для того чтобы получить приватный ключ от кошелька, откройте расширение Metamask, нажмите на троеточие в правом углу, и в открывшемся окне нажмите на «Реквизиты счета», затем на кнопку «Экспортировать закрытый ключ».,После получения HTTP-адреса и закрытого ключа от кошелька, мы их пропишем в .env файл.,Теперь замените файл hardhat.config.js следующим содержимым.,Затем создадим файл scripts/run.js со следующим содержимым. IPFS URL замените со своим ipfs-ом (пример: ipfs://some_token/) или можете использовать наш ipfs который был описан выше.,Мы уже готовы для разворачивания нашего смарт контракта, но для этого нам потребуются деньги на нашем счете.,Фейковый эфир, вы можете взять отсюда:,Теперь когда у вас на счете есть деньги, нам надо развернуть наш контракт, для этого нужно набрать следующую команду и так как это уже реальная транзакция в сети rinkeby, мы должны будем платить газ, вот для чего нам нужен был эфир на счете.,Если все прошло успешно вы должны увидеть адрес вашего контракта. В нашем случае:,Вы можете проверить этот контракт на ,. Перейдите на , и введите адрес контракта. Вы должны увидеть что-то вроде этого.,Нам осталось верифицировать наш контракт, чтобы полноценно использовать его.,Для верификации нам понадобится ключ Etherscan API. Зарегистрируйте бесплатную учетную запись , и получите доступ к своим ключам API ,. Добавим этот ключ API в наш файл .env.,Установим следующий пакет для проверки нашего контракта.,Теперь наш hardhat.config.js должен выглядеть следующим образом:,Теперь выполните следующие две команды:,На места DEPLOYED_CONTRACT_ADDRESS поставьте тот адрес контракта который получили ранее, на места BASE_TOKEN_URI поставьте ваш ipfs url.,В нашем случае вторая команда выглядела так:,Теперь, если вы посетите страницу Rinkeby Etherscan вашего контракта, вы должны будете увидеть маленькую зеленую галочку рядом с вкладкой Contract, которая подтверждает что ваш контракт верифицирован и ваши пользователи теперь смогут подключаться к web3 с помощью Metamask и вызывать функции вашего контракта из самого Etherscan! Попробуйте это сами.,Подключите учетную запись, которую вы использовали для развертывания контракта и вызовите функцию reserveNFT, потом можете попросить кого-нибудь сделать чеканку через функцию mintNFT.,После того как вы отчеканили nft через reserveNFT или через mintNFT, вы на стороне OpenSea должны увидеть ваши nft (testnets.opensea.io),После того как у вас в балансе у контракта появится эфир, только вы как владелец можете запустить функцию withdraw и после успешной транзакции на ваш кошелек зачислится весь баланс из контракта.,Теперь у нас есть развернутый смарт-контракт, который позволяет пользователям чеканить NFT из нашей коллекции. Очевидным следующим шагом будет создание приложения web3, которое позволит нашим пользователям создавать NFT прямо с вашего веб-сайта.","Написание смарт-контракта для NFT ,Крестик,Баг"
[<200 https://tproger.ru/articles/kak-razvivat-kareru-it-specialistu-v-krizis/>],page2,"Востребованность IT-специалистов кратно растет, поэтому кризис ― не время останавливаться в карьерном развитии. При этом правила игры изменились.,Мы все попали в новую реальность и на предыдущее относительно спокойное течение жизни рассчитывать не приходится. Все реагируют на кризис по-своему: кто-то замирает, кто-то начинает хаотичную деятельность ― тревожный новостной фон этому способствует. Согласно исследованию Хабр Карьера, 47% IT-специалистов ищут работу, а 33% рассматривают релокацию.,Главный совет сейчас ― не поддаваться панике и не позволять эмоциям затуманивать рассудок. Любое решение, будь то релокация или смена специализации, должно быть взвешенным, важно принять во внимание все риски и оценить имеющиеся ресурсы.,Если взять, к примеру, релокацию, здесь есть риск снижения стоимости услуг IT-специалистов из РФ за счет избыточного спроса со стороны кандидатов. К этому нужно быть готовым и продумать последовательность шагов для нивелирования рисков заранее.,По моему мнению, для российских IT-специалистов сейчас, как и раньше, открыты все рынки. Сложности скорее связаны с ограничениями, наложенными на банковские операции для российских резидентов, но этот вопрос можно решить. Важно при выборе релокации и в целом при выборе страны проживания осознанно проработать как бытовые вопросы (жилье, питание, наличие стабильного интернета), так и заранее получить оффер или согласие работодателя на переезд.,IT-специалисты отчаянно требуются многим компаниям в России: на начало 2022 года нехватка разработчиков составляла порядка 1 млн человек. При этом бизнес осознает роль разработчиков в обеспечении лидерства на рынке, и готов предлагать специалистам более высокий уровень дохода.,Сложно сказать, где зарплата больше: у глобальных компаний уровень компенсации обычно выше, но туда включается не только фиксированная часть, но и бонусы, льготы для сотрудников, к примеру, релокационный пакет. Поэтому нужно смотреть на доход в совокупности, иногда зарплата средняя, но льготы покрывают многие бытовые потребности, к примеру, оплату проживания, питания, обучение детей, и получается более выгодно. Стартапы часто предлагают опционы, что тоже может быть интересно в долгосрочной перспективе.,Если говорить о том, на какие рынки IT-специалистам стоит обратить внимание, то это Казахстан, Дубай, Узбекистан, Эстония, Армения, Грузия. На Кипр стоит ехать, если вы заинтересованы в развитии криптовалютных проектов.,На Востоке Китай занимает первое место по количеству стартапов, но для работы на рынке обязательно знание языка. В основном ищут IT-специалистов под развитие различных инфраструктур. Frontend и backend востребованы, но больших денег не предлагают. При этом китайский рынок довольно самодостаточный: внутри страны много провинций, потребность в разработчиках сначала закрывается внутри страны, либо с привлечением специалистов из соседних государств, к тому же ― Вьетнам, Таиланд и так далее. Очень интересный рынок в Южной Корее, где очень развит финансовый сектор, там также активно растут стартапы.,IT-специалисты будут востребованы всегда, но рынок меняется, а вместе с ним и карьерные траектории. Компании готовы платить больше, но в перспективе очень внимательны к потенциальной ценности сотрудников для бизнеса. В ближайшие пару лет рынок ждут серьезные испытания, и для того, чтобы прийти в ту точку, в которой хочется оказаться, важно уже сейчас продумать карьерный трек: пообщаться с руководителем, HR-специалистом или карьерным консультантом и сформировать стратегию достижения цели.,Самостоятельный выбор рекомендую посвятить тем компетенциям и технологиям, в которых уже есть экспертиза. Прокачивать навыки в новых областях в кризис может быть слишком рискованным вложением сил. Условно для JAVA middle разработчика будет разумнее сфокусироваться на росте грейда до JAVA senior разработчика, в противоположность погружению в мобильную разработку с нулевым опытом. Кроме того, стоит обратить внимание на прокачку навыков из смежных направлений: вдобавок к программированию будет круто добавить умение тестировать или продумывать архитектуру продукта.,Если говорить о популярных языках программирования, то здесь все стандартно: в топе golang, JS, React/Angular. В США усиливается тренд на no-code разработку, но до нас он еще не дошел.,Безусловно, имеет значение устойчивость текущей бизнес-модели компании работодателя в новых условиях и темпы роста того сегмента рынка, который она занимает. Кроме того, важно оценить готовность компании вкладываться в обучение и развитие сотрудников. Во-первых, это означает, что компания хорошо себя чувствует в текущих условиях, а, во-вторых, возможность прокачивать навыки предполагает конкурентную стабильную зарплату в будущем. Также стоит присмотреться к стартапам и небольшим компаниям: они быстрее адаптируются за счет гибкости процессов.,На мой взгляд, в ближайшее время будут наиболее востребованы специалисты в сферах, связанных с импортозамещением: разработка и внедрение модулей 1С, кибербезопасность, управление аппаратной инфраструктурой. Кроме того, среди проблемных для импортозамещения ПО Минцифры заявляет нефтегазовые, инженерные, графические продукты, а также CRM / ERP системы. Кроме того, нужны специалисты gamedev и разработчики мобильных приложений, так как в этих сферах я предполагаю максимальный отток специалистов за пределы РФ.","Развитие карьеры в IT во время кризиса,Крестик,Баг"
[<200 https://tproger.ru/articles/kak-najti-svoju-kompaniju-i-podgotovitsja-k-realnoj-rabote-put-uchastnikov-croc-boostcamp/>],page2,"Одна из проблем начинающих специалистов — они не всегда могут быстро включиться в работу над конкретными ИТ-проектами. В итоге компании нужно выделять время на их подготовку и онбординг. А стажёрам — выполнять мелкие задачи и ждать, пока их подключат к реальным проектам.,Как найти людей, которые смогут быстро стать полноценными сотрудниками и готовы получать крутой и релевантный опыт? И как снизить нагрузку на будущих наставников? Чтобы ответить на эти вопросы, мы решили запустить двухмесячную программу обучения для талантливых и сильных ребят, готовых примерить на себя роль сотрудника КРОК.,Восемь недель практики, мастер-классы и онбординг вместе с менторами и топовыми экспертами из разных департаментов КРОК — рассказываем, что нужно, чтобы подготовить начинающих сотрудников к работе в компании, и как прошёл CROC Boostcamp.,Это образовательная программа, в течение которой участники прошли весь цикл работы на заказчика: от постановки цели и задач до презентации готового продукта. И параллельно погрузились в процессы компании, познакомились с корпоративной культурой и будущими коллегами.,Вначале ребята подавали заявку на роль, которую хотят получить в проекте: разработчика, аналитика или менеджера. А затем проходили отбор. Основную часть программы составляли спринты разработки. Также были недели открытия и закрытия.,На первой неделе мы объяснили участникам, что будет происходить в ближайшие два месяца, помогли настроить сервисы для продуктивной работы, объединили в команды и познакомили с менторами. И рассказали о том, как КРОК подходит к разработке продуктов. В это же время ребята выбрали продукт, над которым будут работать.,В течение последней недели студенты «допиливали» проекты, провели финальные ретро с менторами и демо для заказчиков. А также научились составлять резюме и проходить собеседования на мастер-классах и отпраздновали окончание Boostcamp на выпускном.,У каждой команды был ментор — сотрудник КРОК, — который помогал планировать спринты, проводить ретро и разбирать сложные кейсы, отслеживал прогресс, оценивал качество работы, корректировал процессы и давал обратную связь.,Как ментор я должен был следить за микроклиматом в группе, создавать условия для того, чтобы ребята самостоятельно и успешно решали задачи. А также развивались и сами, и как команда.,Ещё в программе участвовали эксперты трека — сотрудники КРОК, которые проводили мастер-классы и отвечали на вопросы студентов по конкретным направлениям: аналитике, разработке и продакт-менеджменту.,В программу входили три спринта по две недели, в течение которых участники должны были подготовить один из продуктов:,В начале каждого спринта, чтобы было легче разобраться в задачах, участникам присылали список артефактов: документов и инкрементов продукта, которые студенты должны показать к концу периода. Например, общая концепция проекта, список дополнительных вопросов к заказчику или демонстрация работы веб-приложения.,В конце спринтов у команд на руках должны были быть версии продукта:,Для разработки продуктов на Boostcamp мы выбрали итеративный подход — тот же, что используем в реальной работе. Это помогло участникам лучше подготовиться к тому, что их ждёт на будущей стажировке в компании. Кроме того, так никто из членов команды не «выпадал» из процесса и не ждал целый спринт очереди, чтобы приступить к своим задачам.,Практически всю работу участники выполняли самостоятельно. Такой подход максимально приблизил студентов к реальной работе в КРОК. И помог им научиться взаимодействовать с командой, обрабатывать и анализировать информацию, работать на результат.,Параллельно с работой участники посещали воркшопы, где прокачивали хард и софт скиллы, учились правильно общаться с заказчиками и коллегами из разных команд.,Также проходили сессии с экспертами трека — аналитиками, разработчиками и менеджерами КРОК — на которых студенты могли задавать вопросы по своему направлению. И встречи по обмену командным опытом.,Мне кажется, за эти 2 месяца, прокачалось абсолютно всё: от моих знаний SQL до тайм-менеджмента, несмотря на онлайн-формат, потому что абсолютно все знания сразу же применялись на практике.,Иногда учиться приходилось и вне воркшопов:,Мы рискнули и выбрали геймификацию. Для неё был довольно жёстко задан стек. И это стало большой проблемой — никто из наших разработчиков его не знал. Поэтому мы учили новые технологии прямо во время работы над проектом. ,На мастер-классах и воркшопах мы ещё и рассказывали участникам о себе. Эксперты общались с ребятами, объясняли, что такое корпоративная культура в КРОК: какие у нас ценности и правила общения друг с другом, как мы подходим к работе, к заботе о себе и друг о друге.,Обычно встречи проходили онлайн, но дважды студенты приезжали в офис КРОК, где могли посмотреть, как мы работаем, и лично познакомиться с будущими коллегами.,Кроме того, ребята обсуждали свои взгляды на корпоративную культуру и разбирались, что для них важно в компании. И учились рефлексировать и наблюдать за собой и своим состоянием: участники регулярно заполняли «дневники», с помощью которых отслеживали собственный прогресс, фиксировали успехи и точки роста.,По итогу участники до начала стажировки знали, как строятся в компании, как общаться, к кому обращаться за помощью. Взаимодействие с сотрудниками помогло ещё до выхода на работу наладить горизонтальные связи.,После прохождения CROC Boostcamp, конечно, гораздо легче адаптироваться к работе, потому что нам много рассказывали о корпоративной культуре, мы много общались с сотрудниками, которые тоже когда-то были стажерами.,Мы сразу знали, какие обязанности нас будут ждать, как стажеров, на что обратить внимание, как лучше подготовиться к собеседованию. У нас даже был воркшоп о том, как лучше составить резюме это было очень полезно для всех 🙂 ,За два месяца мы подготовили стажёров, которые готовы сразу влиться в работу над нашими проектами, уже знакомы со всеми этапами создания продукта, хорошо общаются с коллегами и погружены в нашу корпоративную культуру.,Из 71 студента после защиты проектов 70 получили приглашение на собеседование. В итоге прошли его больше 40 участников, и почти 20 из них стали нашими сотрудниками: двое младшими специалистами, а остальные — стажёрами.,То есть «демо-версия» реальной работы вместе с погружением в особенности корпоративной культуры помогла новичкам быстрее адаптироваться. Ещё до начала стажировки они были знакомы с атмосферой в компании и многими процессами, а также  уже успели наладить связи с будущими коллегами.,Кроме того, это оказалось хорошей возможностью прокачать хард и софт скиллы: от построения математических моделей и составления отчётов до умения решать конфликты внутри команды и общаться с заказчиками.,В конце хочу рассказать пару лайфхаков для джунов. Как найти своё место в компании и быстро адаптироваться к работе:","Как подготовиться к реальной работе: опыт CROC Boostcamp,Крестик,Баг"
[<200 https://tproger.ru/articles/programmirovanie-na-c-v-unity-besplatnye-videouroki-dlja-detej-i-podrostkov/>],page2,"Unity (Юнити) — это одна из лучших платформ разработки 2D и 3D компьютерных игр. Unity позволяет создавать приложения, которые работают на более чем 25 платформах. С её помощью можно создавать программы и игры для компьютеров, консолей, мобильных и других устройств.,На этой платформе разработано огромное количество игр и приложений, которые стали настоящими хитами в своей отрасли, например, Pokémon Go, Kerbal Space Program и др. Для программирования на Unity используется язык C# (Си Шарп). Он не вызывает особых трудностей даже у неопытных пользователей, поэтому работать в Юнити может практически каждый.,Мы подготовили серию видеоуроков по программированию на C# в Unity. Они разработаны специально для детей и подростков в возрасте от 10 лет и подходят тем, кто делает первые шаги в данной сфере. С помощью этого видеокурса вы познакомитесь библиотеками Си Шарп и научитесь писать скрипты для своих игр.,Прежде мы уже публиковали , по Unity для начинающих. Они будут полезны, если вы совсем не знакомы с программой, хотите изучить интерфейс и создавать простейшие игры. А в этом плейлисте мы сосредоточимся на скриптах.,В первом видеоуроке рассказываем, где скачать и как правильно установить Visual Studio. Это программа, которая позволяет писать код на языке C#. Также в видеоуроке мы познакомимся со структурой и визуалом Си Шарп. Все эти моменты подробно разбираются, поэтому у вас не возникнет никаких проблем., ,Во втором видеоуроке мы начнём изучать программирование UI в Юнити. Данная платформа имеет ряд объектов UI, которые упрощают работу в программе. В конце видеоурока мы закрепим пройденный материал: добавим кнопки и пропишем скрипт, который позволит вывести текст на монитор., ,На третьем уроке мы будем изучать массив Си Шарп, а также рассмотрим, чем он отличается от переменной и от List. Также мы рассмотрим, как правильно объявлять массив и List на C#., ,На четвёртом уроке мы познакомим вас с операторами в C#. Особое внимание будет уделено оператору if, который применяется, если необходимо выполнить действие в определённом случае. Во время урока мы разберём данный оператор, а также напишем ряд скриптов с ним., ,На пятом уроке мы начнём изучать компоненты Unity и рассмотрим, как их правильно добавлять на объект. Для закрепления материала мы запишем несколько скриптов., ,В шестом видеоуроке мы рассмотрим и изучим циклы в Unity. Особое внимание мы уделим циклу for. Для закрепления материала мы напишем несколько программ., ,Во время седьмого урока мы расскажем, что такое Корутина и для чего она нужна. Также мы научимся писать программы, которые будут запускать и останавливать Coroutine., ,На восьмом уроке мы детально изучим компонент Audio Source в Unity, который позволяет добавлять музыку. Для закрепления материала мы добавим кнопки и для каждой из них напишем скрипт, чтобы при нажатии воспроизводилась музыка., ,Мы настроим сцену и движение объекта, а затем рассмотрим два метода перемещения трехмерных объектов с помощью мыши., ,В десятом видео мы изучим три метода Rigidbody: AddForce, MovePosition и MoveRotation. Напишем скрипты и научимся применять их в наших играх., ,Благодаря этим видеоурокам обучение программированию детей станет еще увлекательнее. Учитесь писать скрипты, создавайте новые игры и делитесь ими с другими пользователями. Unity станет отличным напарником на вашем пути разработчика игр.","Программирование на C# в Unity — бесплатные уроки для детей,Крестик,Баг"
[<200 https://tproger.ru/articles/kak-izmenit-argumenty-komandnoj-stroki-java/>],page2,"Как вы проверяете, что ваш код не содержит ошибок, что он работает во всех ситуациях и обрабатывает все пограничные случаи?,Самый простой вариант — это проверить код на всех возможных тестовых примерах. Но их может быть очень много, из-за чего сам процесс тестирования становится сложным и затратным. Нужен другой способ — который может решить задачу легко, и  который можно автоматизировать для больших входных данных. Аргументы командной строки в Java — один из таких.,В этой статье мы кратко обсудим, что такое аргументы командной строки, как они передаются и как они работают, но наше основное внимание будет сосредоточено на том, как изменять аргументы командной строки Java.,Аргументы командной строки Java позволяют передавать аргументы во время выполнения программы непосредственно из консоли, к которой будет обращаться метод main(). А также позволяет использовать их в качестве входных данных или обходить аргументы командной строки, передав значения непосредственно методу main().,Фрагмент кода:,Аргументы командной строки, которые предоставляются во время выполнения, упаковываются и передаются в args[].,Args[], по сути, является массивом String, который содержит все переданные ему аргументы. Каждый из них будет храниться по индексу, начиная с args[0] и заканчивая args[n].,Аргументы командной строки передаются через командные строки или терминалы. Все переданные через них аргументы будут преобразованы в массив args[] внутри JVM.,Предположим, у нас есть файл с некоторым Java-кодом.,Теперь давайте попробуем сейчас получить доступ ко всем переданным аргументам командной строки вJava.,Поскольку эти аргументы хранятся в массиве args[], мы можем получить к ним доступ, используя args[i], где i — это индекс, который может варьироваться от 0 до n (общее количество переданных аргументов).,Код:,Выход:,Мы можем использовать args[i] для получения значения по i-му индексу. А затем, используя оператор присваивания (=), изменить аргумент по i-му индексу.,Код ниже изменит некоторые аргументы, переданные через командную строку в Java.,Обновлённый вывод:","Как изменить аргументы командной строки Java,Крестик,Баг"
[<200 https://tproger.ru/articles/rezinovaja-verstka-universalnaja-setka-pod-vse-brejkpointy-primery-i-pravila/>],page2,"Материал предназначен для дизайнеров и frontend-разработчиков. Дизайнеры поймут, как минимизировать количество работы для верстальщиков, и тем самым получить их одобрение. Верстальщики научатся экономить свои ресурсы, силы и мозги, чтоб потратить их на более полезные задачи, чем расчёт непонятных сеток.,В 2018 мы перешли на реактивные фреймворки. Наш выбор пал в пользу Vue. Мы используем его в наших проектах чаще всего. Нам понравилась экономия времени и сил за счёт компонентного подхода (HTML, CSS, JS в одном файле). Далее мы решили автоматизировать всё, что только можно автоматизировать.,Раньше, когда компания работала на субподряд, к нам приходили макеты от разных  веб-студий (мы застали ещё времена макетов в photoshop). Сетки в этих в макетах были просто ужасны. Например 12 колонок на десктопе, 10 на каких-то промежуточных разрешениях, и 2 колонки на мобильном. Отступы между колонками могли быть абсолютно разными. Всё это сводило нас с ума, потому что каждое новое разрешение — это как вёрстка нового макета. Никакой экономии, никакой выгоды, постоянно нужно доказывать, что это действительно много работы, но нас никто не собирался слушать, потому что макеты и бюджеты уже согласованы.,Думая о том, как можно снизить расходы на разработку, делать её быстрее, мы задумались о том, что при переходе от дизайнера к разработке заносится больше всего ошибок для вёрстки. Мы начали их искать, и поняли, что сетки — это самое большое зло, которое может быть в нашей совместной работе.,Например, не понятно, на каких разрешениях дизайнер рисует макет 1440 px и на каких разрешениях переходить на макет 768 px. На 1439 px планшетный макет выглядит плохо. Кроме этого есть и другие базовые разрешения, такие, как 1366 px, 1280 px, 1024 px и т.п. Мы пытаемся делать как-то по своему. В итоге получается цепочка итераций переделок и переработок.,Мы подумали: а почему бы не сделать одну сетку и работать с ней? Ведь это должно не сильно повредить дизайнеру в его работе, но при этом очень сильно облегчит работу верстальщика. Так появилась идея стандартизированных резиновых эластичных сеток.,Резиновая верстка — это когда мы перекладываем работу по адаптации макета под доступную ширину браузера, на сам браузер. Достигается это различными CSS-свойствами и единицами измерения: vw, %. При этом макет очень и очень редко масштабируется.,Резиновым макеты делают только по горизонтали. Если мы делаем резиновую верстку по горизонтали и вертикали, то скорее всего перед нами верстка с изменением масштаба, так называемая масштабируемая верстка, она не перестраивает контент.,То есть создавая резиновую верстку, разработчик даже перестроение макета перекладывает на браузер, чтобы все расчеты производились на стороне браузера, таким образом разработчик может не тратить время на “лишние” стили.,Вот образец, как обычно рисуются сетки. На 1920px 12 колонок:,На 1440px — 10 колонок, на 768px — 6 колонок, на 320px 2 колонки,Для нас это плохо. Мы решили уйти от этого.,Мы рисуем десятиколоночную сетку. Её легче считать на вёрстке,Далее сжимаем ширину,Мы видим, что масштабируется только ширина колонок, но не отступы колонок (gutter) и margin по краям. Это не позволяет нам нормально использовать сетку, если просто раскопировать первоначальный вариант и уменьшать ширину макета.,Для максимального масштабирования нам нужно, чтобы менялись и gutter и margin, поэтому мы переходим к ручному масштабированию. Для этого мы используем 10 колонок, margin 40px и gutter 30px.,Рассчитаем размеры в процентах. Берём за основу макет 1920px.,margin 40px займёт:       40 / 1920 = 0,020833333333 = 2,083333%,gutter 30px займёт:         30 / 1920 = 0,015625 = 1.5625%,Ширина колонок 157px: 157 / 1920 = 0,08177083333 = 8,177083%,Для проверки можем сложить все размеры:,10 колонок + 9 gutter + 2 margin,(157 * 10) + (30 * 9) + (40 * 2) = 1920px,Итак, у нас есть процентные размеры:,Рассчитаем размеры на макете 1440px:,Таким же образом можно рассчитать размеры на все ширины макетов,Как мы видим, наша сетка сохранилась. Она просто уменьшилась относительно ширины макета, ширины канваса.,Из всего этого следует, что для резиновой вёрстки нам достаточно всего лишь получить процентные размеры. При этом нам не нужно брать калькулятор и считать эти коэффициенты. Эту работу мы переложим на браузер.,Перейдём к практике. Мы используем препроцессор scss и функцию percentage для расчета процентов, чтоб сократить код. Напишем в HTML и CSS следующее: https://codepen.io/danilabr/pen/yLpbxPr,результат:,Эти стили дают возможность сделать так, чтоб по нажатию на определённую клавишу на body добавился класс .is-grid и отобразилась данная сетка. Это позволяет не тратить время на pixelperfect, и в то же время в процессе вёрстки следить, чтобы блоки располагались правильно по сетке.,Ширину колонки $grid_width и отступ между колонками $grid_gutter будем считать не относительно общей ширины 1920px, а за минусом отступов слева и справа $grid_margin:,В стилях у сетки отрезаем слева и справа margin:,С помощью градиента зацикливаем отрисовку колонок:,Далее добавим обёртку .wrapper, и положим в него элемент .column-item https://codepen.io/danilabr/pen/LYeyXba,HTML:,CSS:,Обратите внимание, значение отступа слева и справа у .wrapper будет правильным на всех разрешениях, нам не нужно писать дополнительные media queries и переопределять это значение. Это огромная экономия времени.,Добавим декоративные стили для .column-item:,Сделаем ширину .column-item равной пяти колонкам. Это можно сделать несколькими способами:,1. Просто измерить ширину 5ти колонок с отступами в макете. Либо сложить ширину колонок руками:,5 колонок * 157px + 4 отступа * 30px = 905px.,(не забываем, что 1920px минус 2 отступа справа и слева по 30px = 1840px).,2. То же самое на чистом CSS:,3. Можно сосчитать 905 / 1840 на калькуляторе (так лучше не писать):,4. Либо, если использовать наши переменные:,Результат всех этих вариантов будет одинаковый:,Часто Frontend-разработчики используют в качестве брейкпоинтов глобальные переменные в препроцессоре. Например, основные разрешения: 1920px, 1440px, 1024px, 768px и т.д. Но это загоняет разработчика в очень узкие рамки. Бывает, что возникают ситуации, когда у нас есть промежуточное разрешение: например, 905px. На нём часто не влезает текст, например, слишком длинное слово.,Самое быстрое решение — уменьшить размер текста. Если для этих нестандартных точек заводить дополнительные переменные, то это плохой путь. Этих переменных может быть очень много. В том числе, поэтому мы не используем bootstrap.,Мы хотим себе оставить свободу использовать разные значения брейк поинтов. Для этого мы используем миксин mq(), который выглядит следующим образом:,Миксин принимает 2 параметра. Второй — опциональный. Если передаётся только один параметр, то используется подход desktop first, если 2, то mobile first.,Добавим к предыдущему примеру mixin mq и брейкпоинт 768px.,При ширине экрана менее 767px ширина .column-item станет равна 4м колонкам + 5px,Измените ширину экрана, и увидите, как фотографии по разному вписываются в нашу сетку. В комментариях указаны подсказки, откуда берутся ширины, которые мы используем. Обратите внимание, что эти стили позволяют нам сохранять правильные пропорции фотографий на всех размерах экрана:,Продемонстрируем 3 варианта вёрстки для размещения двух блоков в сетке. Результат будет одинаковый:,1. Первый способ с помощью display: flex; https://codepen.io/danilabr/pen/LYeLWzN,При разрешении менее 768px padding у блоков сделаем резиновым,с помощью padding: percentage(20 / (320 — 7 * 2));,2. Второй способ использует display: grid; https://codepen.io/danilabr/pen/QWagmxg,Grid в принципе позволяет писать меньше кода. Также следует отметить, что в данном случае мы можем использовать резиновый padding у блоков на всех разрешениях экрана, потому что grid делает расчёт процентов для padding от ширины ячейки, а не от всего контейнера, как в предыдущем способе.,Но, в таком случае на очень больших разрешениях экрана padding будет больше, чем на макете. Мы у себя в компании решили, что это нормально, что это добавляет живости макету. Конечно же, такие правки необходимо согласовывать.,3. В третьем способе мы полностью отказываемся от media queries. Современный frontend позволяет делать и такое. https://codepen.io/danilabr/pen/wvpejWr,Для этого в html нам пришлось добавить обёртки над тэгом <p>. Основная логика заключена в следующей строке:,
flex: max(482px, (100% / 2 — #{percentage(30 / 1840)}));,Здесь используется flex-basis и нативная функция css max. На разрешениях, на которых размер колонок меньше 482px будет использоваться второй параметр функции (100% / 2 — #{percentage(30 / 1840)}).,Растягиваются колонки на всю ширину за счёт flex-basis, переносятся на следующую строку за счёт flex-wrap. В данном случае мы все расчёты переносим на сторону браузера.,В заключение, хочется написать список основных постулатов, которые позволят делать резиновую вёрстку быстро, качественно и надёжно:","Резиновая верстка: универсальная сетка под все брейкпоинты,Крестик,Баг"
[<200 https://tproger.ru/articles/kak-uluchshit-produkt-s-pomoshhju-a-b-testirovanija/>],page2,"Если вы хотите создать по-настоящему качественный продукт, то вам нужно проводить UX-исследования. Одним из ключевых UX-исследований является A/B-тестирование. В этой статье мы рассмотрим его жизненный цикл на конкретных примерах, обсудим, в каких случаях его стоит применять, и разберём ошибки.,В 2019 году популярная социальная сеть изменила пункт меню «Группы» на «Сообщества».,Я считаю, что с точки зрения UX, это катастрофа: слова «Сообщения» и «Сообщества» визуально похожи, а значит люди начнут путаться и переходить в нецелевой раздел (ситуация осложняется ещё и тем, что «Сообщения» и «Сообщества» — самые популярные разделы сети).,Старый и новый дизайн. Здесь и далее источник: доклад «A/B-тестирование как механизм улучшения продукта»,Пройдясь по обсуждениям изменения, я заметил много негатива по этому поводу, что очевидно плохо сказалось на впечатлениях о продукте.,Комментарии, которые оставляли пользователи после изменения дизайна,Этой проблемы можно было избежать с помощью А/В-тестирования.,У нас есть несколько версий одного проекта. Например, страница с баннером: в первом случае баннер находится вверху страницы, а во втором — внизу (вариантов может быть и больше — всё зависит от количества гипотез и размеров аудитории).,Пример А/В-тестирования страницы,Мы берём аудиторию, посетителей страницы, и делим её на несколько групп — по количеству версий продукта. Далее каждая группа пользуется своей версией сайта, а мы следим за ключевой метрикой: здесь это количество переходов по баннеру.,В первом случае их 15%, а во втором  — 21%. Делаем вывод, что второй вариант лучше, и отправляем его в продакшен.,Рассмотрим каждый этап подробнее на примере из моей практики. Этот кейс я разбирал в докладе на конференции Analyst Days-13.,Однажды мы с командой внедряли систему геймификации в корпоративный портал. Её суть заключалась в том, что сотрудники компании отвечали на вопросы коллег, предлагали идеи по развитию, помогали новичкам, пополняли базу знаний, участвовали в конференциях. За это они получали бонусы, которые могли потратить на призы, например, ноутбук или планшет.,Система геймификации,Система получилась хорошей, но спустя некоторое время пользователи стали реже заходить на сервис. Мы решили, что это повод задействовать A/B-тестирование, и внести изменения в продукт.,глобальный результат, которого хотим добиться. В нашем случае, это — повысить вовлечённость. Затем выбрали метрику — показатель, по которому сможем судить о прогрессе. Для нас было важно количество баллов, заработанных пользователями за день., и выяснили, что сервисом пользуются в три временных промежутка: с 9 до 10 часов утра, с 13 до 14 часов дня, и с 17 до 18 часов вечера. Решили протестировать все три периода и определить, когда лучше переводить фокус внутри портала на систему геймификации, чтобы получить лучший результат.,Это прототип, но он показывает суть,У нас есть главная страница с виджетами. Пользователи могут заходить по ним в нужные разделы или видеть на них важную информацию. Мы увеличили игровой виджет в определенные часы, а также добавили яркую кнопку и рейтинг, который, по идее, мотивирует пользователей переходить в раздел и зарабатывать баллы.,. Я разделил его на четыре подэтапа:,Лучшим результат был в середине дня — показатель вырос на 30%,Синим отмечены показатели до проведения A/B-тестирования — когда баннеры были стандартной величины. Красным — то  что получилось, когда мы увеличивали баннер в два раза и добавляли кнопку и рейтинг.,Благодаря нашим изменениям мы увидели прирост среднего количества баллов. Вовлечённость продолжила снижаться, но уже не так быстро, как в начале работы.,В заключение хочу рассказать, какие условия нужны для проведения исследования:,На этом всё. Задавайте вопросы по теме и делитесь своим опытом в комментариях.","Как улучшить продукт с помощью A/B-тестирования,Крестик,Баг"
[<200 https://tproger.ru/articles/obektno-orientirovannoe-programmirovanie/>],page2,"В наши дни практически все инженеры-программисты достаточно глубоко осведомлены о принципах и подходах к применению объектно-ориентированного программирования (ООП). Абстракция, инкапсуляция, наследование, полиморфизм, S.O.L.I.D. для них — не заклинание, вызывающее дождь, а скорее основа повседневной деятельности. Эти методологические термины многократно и подробно объяснены в Сети. Без них сегодня не обходится практически ни одно собеседование. Разбуди девелопера среди ночи и спроси про любой из них, и он скорее всего не собьется в рассказе, так и не проснувшись до конца. Но, как часто случается с концепциями, гораздо реже встречается ответ на вопрос «зачем».,Разработка программного обеспечения — дорогое удовольствие. Процесс этот должен быть максимально эффективным на всех этапах, от постановки задач до сопровождения продукта, иначе он становится экономически невыгодным. Он, этот процесс, не прост и чреват дорогостоящими ошибками, хотя и сулит выход бизнеса заказчика на новый уровень. Именно здесь кроется ответ на вопрос «зачем» в отношении ООП. Для эффективного (читай — экономически выгодного) преодоления сложностей разработки ПО.,Написание программного кода — это всегда решение той или иной поставленной перед программистом задачи, которую он может реализовать любыми доступными ему методами. Но зачастую приходится решать шаблонные задачи, практически не отличающиеся друг от друга. Или сталкиваться с тем, что задача распадается на отдельные, уже где-то встречавшиеся и решенные. ООП помогает систематизировать такие решения и избегать повторов.,Хорошим примером эффективного ответа ООП в сочетании с дженериками на целый класс типовых проблем могут служить коллекции java. Поверьте, хлеб программиста без них был бы горек… Многократное использование кода (по сути — многократное использование решений) — залог управляемости, вытекающей из постоянства и предсказуемости знакомых компонентов.,Жизнь программного проекта не линейна. Иногда проектные изменения возникают на позднем этапе, когда много чистого, отлаженного и, что важно, оплаченного кода уже написано. И вот необходимо обеспечить поддержку новых требований, сохраняя решения в актуальном, рабочем состоянии. ООП, если его «правильно готовить», позволяет предвосхитить подобные проблемы. В правильно спроектированных и реализованных системах даже драматические на первый взгляд изменения в требованиях адаптируются порой посредством настройки конфигурации. Ну или другой «малой кровью».,Но чаще бывает так, что когда кода много, и он пишется многими людьми, которые приходят и уходят, то без должной дисциплины на уровне самого кода с какого-то момента команда начинает тратить неприемлемо много своего дорогостоящего рабочего времени на адаптацию накопившейся кодовой массы к самым небольшим изменениям. ООП здесь существенно выручает, ибо эта методология сама по себе поощряет разделение задач и решений по функциональности, использование правила «необходимой достаточности», когда большая задача и связанные с ней данные рационально делится на меньшие подзадачи и те в свою очередь находят свои максимально изолированные решения. Связь же между ними, их взаимодействие, оказываются выражены в четких контрактах.,Опыт применения ООП породил интереснейший самостоятельный феномен — шаблоны проектирования. Даже если вы не знакомы с каждым членом этого многочисленного семейства, но обладаете здравым смыслом и поняли «зачем» ООП вообще, то наверняка использовали их. Многие из них естественным образом вытекают из прямых требований самого ООП. На самом деле шаблоны проектирования — это особый вид многократного использования, только в данном случае не кода, а подходов к решению. Описывать шаблоны проектирования и реализовывать их в терминах ООП намного проще, чем, скажем, в терминах процедурного программирования. Хотя реализовать принятое на их основе решение можно на любом языке.,ООП помноженное на грамотное использование шаблонов создает основу для «промышленной» разработки ПО. Это можно сравнить с принципами разработки современных, скажем, автомобилей или компьютеров: чтобы спроектировать новую модель, не нужно заново создавать для нее базовые компоненты — используются уже готовые. Новая модель — она насколько новая? И все-таки… Из готовых блоков с добавлением щепотки инноваций возникает нечто…,Вскоре стало понятно, что шаблоны проектирования существуют и для систем более высокого уровня. Например, в организации существует большое количество приложений для разных функциональных подразделений: логистики, бухгалтерии и так далее. Для каждого из них существуют свои приложения, но они должны каким-то образом связываться между собой: возникает запрос на некие шаблоны проектирования этого взаимодействия. Переходя с уровня application на уровень enterprise мы начинаем мыслить уже не категориями классов и интерфейсов, а категориями модулей и интеграционных каналов.,Кажется, на этом уровне мы уже утрачиваем связь с объектно-ориентированным программированием в том виде, как его задумал Создатель… Здесь уже совсем другие игроки: (микро)сервисы, сторонние АПИ, каналы интеграции, распределенные кэши, протоколы… Но если мы поищем в Сети практическое определение микросервиса, то оно удивительным образом будет напоминать классическое определение для объекта, принятое в ООП.,Итак, OOП нам строить и жить помогает, воспитывая практичные и эффективные навыки реализации сложных проектов. По мне так и сам объектно-ориентированный код — штука приятная. Не знаю как вы, а я, когда пользуюсь навигацией по коду в моей любимой среде разработки, порой задумываюсь, насколько ее, навигации, удобство связано с тем, что это код на объектно-ориентированном языке. Думаю, напрямую. Возможно, авторы ООП и не задумывались о таком приятном «побочном эффекте».,Возьмем простой пример практического использования ООП. Допустим, требуется оперировать такой штукой как ИНН. Мы знаем, что ИНН бывает у физических и юридических лиц, но они отличаются количеством цифр в значении и механизмом верификации (да-да, у них по-разному вычисляется контрольная сумма). Значения приходят к нам в виде строк с непредсказуемым содержимым, но дальше в систему должны проникать только верифицированные значения. При этом конкретный интерес к тому, чей это ИНН — «юрика» или «физика» у нас отложен. До поры нам достаточно просто быть уверенными, что это «правильный» ИНН.,
,В данном случае мы, сами того не замечая, применили аж несколько шаблонов проектирования. Даже не буду уточнять, каких… Но в итоге имеем две корректные анонимные реализации, а прочие запрещены, ибо в природе другого варианта ИНН пока не существует.,Другой пример: у нас есть набор сервисов для коммуникаций (почтовый, SMS и так далее) с одинаковым интерфейсом и схожим функционалом. Для отправки сообщений через них мы можем использовать этот единый интерфейс, вызывая его метод «send» у переданного нам экземпляра класса, реализующего этот интерфейс. Важно, что при этом возможность переключения канала отправки — например, с почты, на SMS — реализуется без изменения кода в точке отправки. Точка отправки не имеет ровным счетом никакого представления, т.к. для нее это просто какой-то носитель метода «send». Короче, получается что-то вроде,Если придерживаться этого каркаса, то, прописав классы исключений, конверторы, верификаторы и логирование, мы, надеюсь, заметим, что функциональность рассылки сообщений распалась не только на подзадачи, но и расслоилась на уровни, каждый из которых прост в понимании и в значительной степени изолирован. А это залог управляемости, тестируемости, стабильности. Что в данном случае мы использовали — инкапсуляцию, наследование, полиморфизм — об этом как-то уже не думаешь.,Преимущества ООП, как и любого инструмента программирования, проявляются только при правильном владении этим инструментом. Недостаточное изучение имеющихся в арсенале программиста средств может привести к «изобретению велосипеда», злоупотреблению абстракцией и усложнению проекта за счет каких-то лишних решений. Ну и здравый смысл… Не пренебрегаем — запрягаем.,Например, если необходимо представить ФИО в виде объекта со свойствами: «фамилия, имя и отчество», которые должны писаться с заглавной буквы, то создание трех отдельных реализаций интерфейса NamePart для каждого из них, хоть и возможно, но, как говорила моя бабушка, «декомпозируя задачу и выделяя доменные сущности, не сходи с ума, внучек». И то правда… Ибо на самом деле они по отдельности и не живут — фамилии с именами.,Мы в IT_One используем язык Java. По крайней мере на том проекте, где я сейчас Java — наше все. И не только потому, что это «с момента зачатия» объектно-ориентированный язык. Java — это давно уже больше, чем язык. Это платформа, хотя само это слово мало что объясняет.,Дело в том, что профессионально разрабатывая современное ПО, инженер оперирует по большей части даже уже не пакетами классов, которых кстати, в Java великое множество, а скорее реализациями обширных спецификаций и фреймворками (Jakarta, Spring, Micronaut, Hibernate и др.), набором библиотек и инструментов, которые создают каркас приложения, задают тон всей разработке. Эти фреймворки — гигантское количество кода и модулей, воплощающих принципы и лучшие практики ООП.,При этом базовые знания о языке и принципы ООП современный developer использует автоматически, с мастерством — как водитель, выжимающий педаль сцепления и перемещающий рычаг переключения передач.,Сегодня в уже готовые, заранее созданные компоненты программист вносит специфическую для конкретной задачи или проекта функциональность, создает композиции из имеющихся компонентов, разрабатывает свои, следуя диктуемым самим фреймворком правилам. Эта «увлекательная рутина» занимает основное время современного разработчика.,Казалось бы, простор для творчества и самовыражения сужается пропорционально громадности фреймворка. Но все совсем не так грустно. Иногда (даже часто) достигнутый результат — «правильно» работающая система — доставляет гигантское удовольствие всей команде и каждому участнику «заплыва». Поверьте, расползающийся, кишащий повторами, плохо читаемый, запутанный, но «авторский» код, ставший таковым просто из-за игнорирования современных стандартов разработки, даже если «взлетит на проде», останется больше проблемой, чем решением.,Говорят, что объектно-ориентированное программирование сложнее в освоении и требует от программиста несколько больших, чем обычно, компетенций, помимо понимания базовых концепций.,Это мнение справедливо. Ибо то, зачем возникло ООП, уже с нами. Это особый пестрый мир взаимодействующих решений, новомодных или консервативных, тяжеловесных или облегченных, специфических или общего назначения.,Но всегда управляемых, ясных, выработанных с применением нескольких простых и очевидных до банальности принципах.,И этот мир сегодня на подъеме.","Объектно-ориентированное программирование,Крестик,Баг"
[<200 https://tproger.ru/articles/kak-nastroit-rabotu-net-prilozhenija-sql-server-flyway-migracij-s-pomoshhju-docker-docker-compose/>],page2,"Зачастую разработчикам необходимо устанавливать и настраивать разные приложения, технологии, сервисы для локальной разработки проектов. Когда проект один и вы работаете, например, с одной версией .NET, или если все разработчики работают на Windows, то какие-либо проблемы с настройкой проекта вряд ли появятся.,Но что, если вам периодически нужно переключаться между разными версиями Java, PHP, Node.js, да еще и у одного разработчика установлен Linux, а у другого Windows? Конечно, можно писать инструкции по установке и настройке, но это не решает проблему изолированности вашей операционной системы от среды приложения.,После удаления уже установленной версии .NET, SQL Server могут остаться какие-либо файлы конфигурации, которые могут привести к ошибке запуска другой установленной версии приложения.,Для решения подобных проблем запуска приложения .NET, SQL Server на разных средах можно использовать Docker, Docker Compose.,Для установки Docker нам нужно на странице , открыть руководство по необходимой ОС.,Для установки Docker Compose — на странице , также открыть руководство по необходимой ОС.,Проверяем, что Docker и Docker Compose работает, выполняя команды в консоли:,Для своих проектов, где используется Docker, я придерживаюсь следующей структуры:,docker-compose.yml — файл с настройками запуска контейнеров.,Для работы .NET-приложения создадим файл Dockerfile в директории проекта с путем docker/api/Dockerfile:,Для работы SQL Server создадим файл Dockerfile в директории проекта с путем docker/db/Dockerfile, содержимое которого:,Подробнее о работе с миграциями с помощью Flyway можно почитать тут:,— ,,,— ,Итак, нам осталось создать только файл docker-compose.yml, чтобы описать в нем все сервисы:,Создадим файл docker-compose.yml в директории проекта с путем docker/docker-copmose.yml и содержимым:,Для запуска нам нужно запустить Docker-контейнеры при помощи команды docker-compose. Из директории проекта выполняем в терминале команду:,после чего наше приложение должно открыться в браузере по url: http://localhost:5000,К SQL Server мы можем подключиться с помощью команды:,указав пароль ","Как настроить .NET приложения с помощью Docker и Docker Compose,Крестик,Баг"
[<200 https://tproger.ru/articles/skraping-s-goutte-crawler-parsing-sajtov-s-ispolzovaniem-biblioteki-goutte/>],page2,"В новой записи я вам покажу PHP библиотеку для парсинга (скрапинга) сайтов. С помощью данной библиотеки вы сможете забирать любую информацию со стороннего сайта, переходить по ссылкам, автоматически отправлять формы., ,В качестве примера я буду использовать свой сайт. В самом начале нужно сделать запрос на главную страницу, далее мы будем забирать с неё элементы, поэтому код ниже будет использоваться в каждом запросе, просто я его не буду дублировать.,Используя метод filter вы можете указать селектор для выборки элементов. Так как на данной странице используется несколько элементов с классом home_heading_post мы будем использовать метод each.,Используйте метод reduce для указания функции для фильтрации выборки. В моём примере указана функция которая задаёт порядок «через 1» и «каждый десятый элемент».,С помощью метода eq вы можете указать номер элемента. Нумерация идёт с 0, поэтому в моём примере и мы получим 4 элемент с классом «home_heading_post».,first() — возвращаем первый элемент.,
last() — возвращает последний элемент.,siblings() — возвращает соседние элементы в дереве DOM.,С помощью метода selectLink() получаем ссылку, в качестве параметра передадим текст внутри ссылки.,С помощью метода link() переходим по ссылке и получаем новую страницу.,С помощью метода getUri() получаем URI ссылки.","Скрапинг с Goutte (crawler). Парсинг сайтов с использованием Goutte,Крестик,Баг"
[<200 https://tproger.ru/articles/pishem-sistemu-raspoznavanija-ladoni-na-python-opencv/>],page2,"Всем привет, сегодня я покажу как написать систему распознавания ладони на Python + OpenCV (26 строчек кода). Этот урок требует минимальных знаний OpenCV.,Примерно это:,
,
,Вам потребуется:,Установка происходит через пакетный менеджер:,Я решил использовать mediapipe, потому что в нём есть уже обученная ИИ для распознания ладони.,Для начало вам нужно понять, что ладонь состоит из суставов, которые можно выразить точками:,Далее пишем сам код:,Решение ошибки: , можно найти ,.,В коде есть комментарии, но предлагаю разобрать подробно:,Импорты OpenCV и mediapipe.,Необходимые объекты: камера (cap), нейронка для определения ладоней (hands) с аргументов max_num_hands — максимальное количество ладоней, — и наша «рисовалка» (draw).,Бесконечный цикл.,Выходим из цикла если нажата клавиша с номером 27 (Esc).,Считываем изображение с камеры, отражаем изображение по вертикали и горизонтали, конвертируем в RGB. И, самое интересное, отдаём нашу картинку на определение ладоней.,Первый if-блок проверяет были ли вообще найдены ладони (любой не пустой объект является истинным). Далее циклом for мы «перебираем» объект с набором этих точек. Второй for — перебираем сами точки из набора,draw.draw_landmarks — удобная утилита, которая рисует ладонь на изображении, в аргументах: изображение, набор точек, и что рисуем (в нашем случае руку).,Отображаем картинку.,Мы написали распознавание ладони на Python в 26 строк кода, круто, не так ли? Оцените этот пост ведь это важно для меня.","Пишем систему распознавания ладони на Python OpenCV,Крестик,Баг"
